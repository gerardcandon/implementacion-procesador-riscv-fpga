// disenyo_qsys.v

// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module disenyo_qsys (
		input  wire        clk_clk,             //             clk.clk
		output wire        pll_clk_100_mhz_clk, // pll_clk_100_mhz.clk
		output wire        pll_locked_export,   //      pll_locked.export
		input  wire        pll_reset_export,    //       pll_reset.export
		input  wire        pll_slave_read,      //       pll_slave.read
		input  wire        pll_slave_write,     //                .write
		input  wire [1:0]  pll_slave_address,   //                .address
		output wire [31:0] pll_slave_readdata,  //                .readdata
		input  wire [31:0] pll_slave_writedata, //                .writedata
		inout  wire        ps2_CLK,             //             ps2.CLK
		inout  wire        ps2_DAT,             //                .DAT
		input  wire        reset_reset_n,       //           reset.reset_n
		output wire        sdram_clk_clk,       //       sdram_clk.clk
		output wire [12:0] sdram_wire_addr,     //      sdram_wire.addr
		output wire [1:0]  sdram_wire_ba,       //                .ba
		output wire        sdram_wire_cas_n,    //                .cas_n
		output wire        sdram_wire_cke,      //                .cke
		output wire        sdram_wire_cs_n,     //                .cs_n
		inout  wire [31:0] sdram_wire_dq,       //                .dq
		output wire [3:0]  sdram_wire_dqm,      //                .dqm
		output wire        sdram_wire_ras_n,    //                .ras_n
		output wire        sdram_wire_we_n,     //                .we_n
		inout  wire [15:0] sram_DQ,             //            sram.DQ
		output wire [19:0] sram_ADDR,           //                .ADDR
		output wire        sram_LB_N,           //                .LB_N
		output wire        sram_UB_N,           //                .UB_N
		output wire        sram_CE_N,           //                .CE_N
		output wire        sram_OE_N,           //                .OE_N
		output wire        sram_WE_N,           //                .WE_N
		input  wire        start_bit,           //           start.bit
		output wire        vga_CLK,             //             vga.CLK
		output wire        vga_HS,              //                .HS
		output wire        vga_VS,              //                .VS
		output wire        vga_BLANK,           //                .BLANK
		output wire        vga_SYNC,            //                .SYNC
		output wire [7:0]  vga_R,               //                .R
		output wire [7:0]  vga_G,               //                .G
		output wire [7:0]  vga_B                //                .B
	);

	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_valid;                      // video_dual_clock_buffer_0:stream_out_valid -> video_vga_controller_0:valid
	wire  [29:0] video_dual_clock_buffer_0_avalon_dc_buffer_source_data;                       // video_dual_clock_buffer_0:stream_out_data -> video_vga_controller_0:data
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_ready;                      // video_vga_controller_0:ready -> video_dual_clock_buffer_0:stream_out_ready
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket;              // video_dual_clock_buffer_0:stream_out_startofpacket -> video_vga_controller_0:startofpacket
	wire         video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket;                // video_dual_clock_buffer_0:stream_out_endofpacket -> video_vga_controller_0:endofpacket
	wire         video_dma_controller_0_avalon_pixel_source_valid;                             // video_dma_controller_0:stream_valid -> video_dual_clock_buffer_0:stream_in_valid
	wire  [29:0] video_dma_controller_0_avalon_pixel_source_data;                              // video_dma_controller_0:stream_data -> video_dual_clock_buffer_0:stream_in_data
	wire         video_dma_controller_0_avalon_pixel_source_ready;                             // video_dual_clock_buffer_0:stream_in_ready -> video_dma_controller_0:stream_ready
	wire         video_dma_controller_0_avalon_pixel_source_startofpacket;                     // video_dma_controller_0:stream_startofpacket -> video_dual_clock_buffer_0:stream_in_startofpacket
	wire         video_dma_controller_0_avalon_pixel_source_endofpacket;                       // video_dma_controller_0:stream_endofpacket -> video_dual_clock_buffer_0:stream_in_endofpacket
	wire         sys_sdram_pll_0_sys_clk_clk;                                                  // sys_sdram_pll_0:sys_clk_clk -> [mm_interconnect_0:sys_sdram_pll_0_sys_clk_clk, new_sdram_controller_0:clk, rst_controller_001:clk]
	wire         video_pll_0_vga_clk_clk;                                                      // video_pll_0:vga_clk_clk -> [rst_controller_002:clk, video_dual_clock_buffer_0:clk_stream_out, video_vga_controller_0:clk]
	wire         video_dma_controller_0_avalon_dma_master_waitrequest;                         // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_waitrequest -> video_dma_controller_0:master_waitrequest
	wire  [31:0] video_dma_controller_0_avalon_dma_master_readdata;                            // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_readdata -> video_dma_controller_0:master_readdata
	wire  [31:0] video_dma_controller_0_avalon_dma_master_address;                             // video_dma_controller_0:master_address -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_address
	wire         video_dma_controller_0_avalon_dma_master_read;                                // video_dma_controller_0:master_read -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_read
	wire         video_dma_controller_0_avalon_dma_master_readdatavalid;                       // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_readdatavalid -> video_dma_controller_0:master_readdatavalid
	wire         video_dma_controller_0_avalon_dma_master_lock;                                // video_dma_controller_0:master_arbiterlock -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_lock
	wire  [31:0] ensamblado_procesador_0_avalon_master_readdata;                               // mm_interconnect_0:ensamblado_procesador_0_avalon_master_readdata -> ensamblado_procesador_0:readdata
	wire         ensamblado_procesador_0_avalon_master_waitrequest;                            // mm_interconnect_0:ensamblado_procesador_0_avalon_master_waitrequest -> ensamblado_procesador_0:waitrequest
	wire  [27:0] ensamblado_procesador_0_avalon_master_address;                                // ensamblado_procesador_0:address -> mm_interconnect_0:ensamblado_procesador_0_avalon_master_address
	wire         ensamblado_procesador_0_avalon_master_read;                                   // ensamblado_procesador_0:read -> mm_interconnect_0:ensamblado_procesador_0_avalon_master_read
	wire   [3:0] ensamblado_procesador_0_avalon_master_byteenable;                             // ensamblado_procesador_0:byteenable -> mm_interconnect_0:ensamblado_procesador_0_avalon_master_byteenable
	wire         ensamblado_procesador_0_avalon_master_readdatavalid;                          // mm_interconnect_0:ensamblado_procesador_0_avalon_master_readdatavalid -> ensamblado_procesador_0:readdatavalid
	wire  [31:0] ensamblado_procesador_0_avalon_master_writedata;                              // ensamblado_procesador_0:writedata -> mm_interconnect_0:ensamblado_procesador_0_avalon_master_writedata
	wire         ensamblado_procesador_0_avalon_master_write;                                  // ensamblado_procesador_0:write -> mm_interconnect_0:ensamblado_procesador_0_avalon_master_write
	wire  [31:0] master_0_master_readdata;                                                     // mm_interconnect_0:master_0_master_readdata -> master_0:master_readdata
	wire         master_0_master_waitrequest;                                                  // mm_interconnect_0:master_0_master_waitrequest -> master_0:master_waitrequest
	wire  [31:0] master_0_master_address;                                                      // master_0:master_address -> mm_interconnect_0:master_0_master_address
	wire         master_0_master_read;                                                         // master_0:master_read -> mm_interconnect_0:master_0_master_read
	wire   [3:0] master_0_master_byteenable;                                                   // master_0:master_byteenable -> mm_interconnect_0:master_0_master_byteenable
	wire         master_0_master_readdatavalid;                                                // mm_interconnect_0:master_0_master_readdatavalid -> master_0:master_readdatavalid
	wire         master_0_master_write;                                                        // master_0:master_write -> mm_interconnect_0:master_0_master_write
	wire  [31:0] master_0_master_writedata;                                                    // master_0:master_writedata -> mm_interconnect_0:master_0_master_writedata
	wire  [15:0] mm_interconnect_0_sram_0_avalon_sram_slave_readdata;                          // sram_0:readdata -> mm_interconnect_0:sram_0_avalon_sram_slave_readdata
	wire  [19:0] mm_interconnect_0_sram_0_avalon_sram_slave_address;                           // mm_interconnect_0:sram_0_avalon_sram_slave_address -> sram_0:address
	wire         mm_interconnect_0_sram_0_avalon_sram_slave_read;                              // mm_interconnect_0:sram_0_avalon_sram_slave_read -> sram_0:read
	wire   [1:0] mm_interconnect_0_sram_0_avalon_sram_slave_byteenable;                        // mm_interconnect_0:sram_0_avalon_sram_slave_byteenable -> sram_0:byteenable
	wire         mm_interconnect_0_sram_0_avalon_sram_slave_readdatavalid;                     // sram_0:readdatavalid -> mm_interconnect_0:sram_0_avalon_sram_slave_readdatavalid
	wire         mm_interconnect_0_sram_0_avalon_sram_slave_write;                             // mm_interconnect_0:sram_0_avalon_sram_slave_write -> sram_0:write
	wire  [15:0] mm_interconnect_0_sram_0_avalon_sram_slave_writedata;                         // mm_interconnect_0:sram_0_avalon_sram_slave_writedata -> sram_0:writedata
	wire  [31:0] mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_readdata;   // video_dma_controller_0:slave_readdata -> mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_readdata
	wire   [1:0] mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_address;    // mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_address -> video_dma_controller_0:slave_address
	wire         mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_read;       // mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_read -> video_dma_controller_0:slave_read
	wire   [3:0] mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_byteenable; // mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_byteenable -> video_dma_controller_0:slave_byteenable
	wire         mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_write;      // mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_write -> video_dma_controller_0:slave_write
	wire  [31:0] mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_writedata;  // mm_interconnect_0:video_dma_controller_0_avalon_dma_control_slave_writedata -> video_dma_controller_0:slave_writedata
	wire         mm_interconnect_0_ps2_0_avalon_ps2_slave_chipselect;                          // mm_interconnect_0:ps2_0_avalon_ps2_slave_chipselect -> ps2_0:chipselect
	wire  [31:0] mm_interconnect_0_ps2_0_avalon_ps2_slave_readdata;                            // ps2_0:readdata -> mm_interconnect_0:ps2_0_avalon_ps2_slave_readdata
	wire         mm_interconnect_0_ps2_0_avalon_ps2_slave_waitrequest;                         // ps2_0:waitrequest -> mm_interconnect_0:ps2_0_avalon_ps2_slave_waitrequest
	wire   [0:0] mm_interconnect_0_ps2_0_avalon_ps2_slave_address;                             // mm_interconnect_0:ps2_0_avalon_ps2_slave_address -> ps2_0:address
	wire         mm_interconnect_0_ps2_0_avalon_ps2_slave_read;                                // mm_interconnect_0:ps2_0_avalon_ps2_slave_read -> ps2_0:read
	wire   [3:0] mm_interconnect_0_ps2_0_avalon_ps2_slave_byteenable;                          // mm_interconnect_0:ps2_0_avalon_ps2_slave_byteenable -> ps2_0:byteenable
	wire         mm_interconnect_0_ps2_0_avalon_ps2_slave_write;                               // mm_interconnect_0:ps2_0_avalon_ps2_slave_write -> ps2_0:write
	wire  [31:0] mm_interconnect_0_ps2_0_avalon_ps2_slave_writedata;                           // mm_interconnect_0:ps2_0_avalon_ps2_slave_writedata -> ps2_0:writedata
	wire         mm_interconnect_0_new_sdram_controller_0_s1_chipselect;                       // mm_interconnect_0:new_sdram_controller_0_s1_chipselect -> new_sdram_controller_0:az_cs
	wire  [31:0] mm_interconnect_0_new_sdram_controller_0_s1_readdata;                         // new_sdram_controller_0:za_data -> mm_interconnect_0:new_sdram_controller_0_s1_readdata
	wire         mm_interconnect_0_new_sdram_controller_0_s1_waitrequest;                      // new_sdram_controller_0:za_waitrequest -> mm_interconnect_0:new_sdram_controller_0_s1_waitrequest
	wire  [24:0] mm_interconnect_0_new_sdram_controller_0_s1_address;                          // mm_interconnect_0:new_sdram_controller_0_s1_address -> new_sdram_controller_0:az_addr
	wire         mm_interconnect_0_new_sdram_controller_0_s1_read;                             // mm_interconnect_0:new_sdram_controller_0_s1_read -> new_sdram_controller_0:az_rd_n
	wire   [3:0] mm_interconnect_0_new_sdram_controller_0_s1_byteenable;                       // mm_interconnect_0:new_sdram_controller_0_s1_byteenable -> new_sdram_controller_0:az_be_n
	wire         mm_interconnect_0_new_sdram_controller_0_s1_readdatavalid;                    // new_sdram_controller_0:za_valid -> mm_interconnect_0:new_sdram_controller_0_s1_readdatavalid
	wire         mm_interconnect_0_new_sdram_controller_0_s1_write;                            // mm_interconnect_0:new_sdram_controller_0_s1_write -> new_sdram_controller_0:az_wr_n
	wire  [31:0] mm_interconnect_0_new_sdram_controller_0_s1_writedata;                        // mm_interconnect_0:new_sdram_controller_0_s1_writedata -> new_sdram_controller_0:az_data
	wire         irq_mapper_receiver0_irq;                                                     // ps2_0:irq -> irq_mapper:receiver0_irq
	wire         ensamblado_procesador_0_interrupt_receiver_irq;                               // irq_mapper:sender_irq -> ensamblado_procesador_0:irq
	wire         rst_controller_reset_out_reset;                                               // rst_controller:reset_out -> [altpll_0:reset, ensamblado_procesador_0:reset, irq_mapper:reset, mm_interconnect_0:master_0_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:video_dma_controller_0_reset_reset_bridge_in_reset_reset, ps2_0:reset, sram_0:reset, sys_sdram_pll_0:ref_reset_reset, video_dma_controller_0:reset, video_dual_clock_buffer_0:reset_stream_in, video_pll_0:ref_reset_reset]
	wire         rst_controller_001_reset_out_reset;                                           // rst_controller_001:reset_out -> [mm_interconnect_0:new_sdram_controller_0_reset_reset_bridge_in_reset_reset, new_sdram_controller_0:reset_n]
	wire         sys_sdram_pll_0_reset_source_reset;                                           // sys_sdram_pll_0:reset_source_reset -> rst_controller_001:reset_in0
	wire         rst_controller_002_reset_out_reset;                                           // rst_controller_002:reset_out -> [video_dual_clock_buffer_0:reset_stream_out, video_vga_controller_0:reset]
	wire         video_pll_0_reset_source_reset;                                               // video_pll_0:reset_source_reset -> rst_controller_002:reset_in0

	disenyo_qsys_altpll_0 altpll_0 (
		.clk                (clk_clk),                        //       inclk_interface.clk
		.reset              (rst_controller_reset_out_reset), // inclk_interface_reset.reset
		.read               (pll_slave_read),                 //             pll_slave.read
		.write              (pll_slave_write),                //                      .write
		.address            (pll_slave_address),              //                      .address
		.readdata           (pll_slave_readdata),             //                      .readdata
		.writedata          (pll_slave_writedata),            //                      .writedata
		.c0                 (pll_clk_100_mhz_clk),            //                    c0.clk
		.areset             (pll_reset_export),               //        areset_conduit.export
		.locked             (pll_locked_export),              //        locked_conduit.export
		.scandone           (),                               //           (terminated)
		.scandataout        (),                               //           (terminated)
		.phasedone          (),                               //           (terminated)
		.phasecounterselect (4'b0000),                        //           (terminated)
		.phaseupdown        (1'b0),                           //           (terminated)
		.phasestep          (1'b0),                           //           (terminated)
		.scanclk            (1'b0),                           //           (terminated)
		.scanclkena         (1'b0),                           //           (terminated)
		.scandata           (1'b0),                           //           (terminated)
		.configupdate       (1'b0)                            //           (terminated)
	);

	ensamblado_procesador ensamblado_procesador_0 (
		.reset         (rst_controller_reset_out_reset),                      //              reset.reset
		.address       (ensamblado_procesador_0_avalon_master_address),       //      avalon_master.address
		.writedata     (ensamblado_procesador_0_avalon_master_writedata),     //                   .writedata
		.readdata      (ensamblado_procesador_0_avalon_master_readdata),      //                   .readdata
		.read          (ensamblado_procesador_0_avalon_master_read),          //                   .read
		.write         (ensamblado_procesador_0_avalon_master_write),         //                   .write
		.byteenable    (ensamblado_procesador_0_avalon_master_byteenable),    //                   .byteenable
		.waitrequest   (ensamblado_procesador_0_avalon_master_waitrequest),   //                   .waitrequest
		.readdatavalid (ensamblado_procesador_0_avalon_master_readdatavalid), //                   .readdatavalid
		.reloj         (clk_clk),                                             //         clock_sink.clk
		.irq           (ensamblado_procesador_0_interrupt_receiver_irq),      // interrupt_receiver.irq
		.start         (start_bit)                                            //        conduit_end.bit
	);

	disenyo_qsys_master_0 #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) master_0 (
		.clk_clk              (clk_clk),                       //          clk.clk
		.clk_reset_reset      (~reset_reset_n),                //    clk_reset.reset
		.master_address       (master_0_master_address),       //       master.address
		.master_readdata      (master_0_master_readdata),      //             .readdata
		.master_read          (master_0_master_read),          //             .read
		.master_write         (master_0_master_write),         //             .write
		.master_writedata     (master_0_master_writedata),     //             .writedata
		.master_waitrequest   (master_0_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (master_0_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (master_0_master_byteenable),    //             .byteenable
		.master_reset_reset   ()                               // master_reset.reset
	);

	disenyo_qsys_new_sdram_controller_0 new_sdram_controller_0 (
		.clk            (sys_sdram_pll_0_sys_clk_clk),                               //   clk.clk
		.reset_n        (~rst_controller_001_reset_out_reset),                       // reset.reset_n
		.az_addr        (mm_interconnect_0_new_sdram_controller_0_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_new_sdram_controller_0_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_new_sdram_controller_0_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_new_sdram_controller_0_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_new_sdram_controller_0_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_new_sdram_controller_0_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_new_sdram_controller_0_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_new_sdram_controller_0_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_new_sdram_controller_0_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_wire_addr),                                           //  wire.export
		.zs_ba          (sdram_wire_ba),                                             //      .export
		.zs_cas_n       (sdram_wire_cas_n),                                          //      .export
		.zs_cke         (sdram_wire_cke),                                            //      .export
		.zs_cs_n        (sdram_wire_cs_n),                                           //      .export
		.zs_dq          (sdram_wire_dq),                                             //      .export
		.zs_dqm         (sdram_wire_dqm),                                            //      .export
		.zs_ras_n       (sdram_wire_ras_n),                                          //      .export
		.zs_we_n        (sdram_wire_we_n)                                            //      .export
	);

	disenyo_qsys_ps2_0 ps2_0 (
		.clk         (clk_clk),                                              //                clk.clk
		.reset       (rst_controller_reset_out_reset),                       //              reset.reset
		.address     (mm_interconnect_0_ps2_0_avalon_ps2_slave_address),     //   avalon_ps2_slave.address
		.chipselect  (mm_interconnect_0_ps2_0_avalon_ps2_slave_chipselect),  //                   .chipselect
		.byteenable  (mm_interconnect_0_ps2_0_avalon_ps2_slave_byteenable),  //                   .byteenable
		.read        (mm_interconnect_0_ps2_0_avalon_ps2_slave_read),        //                   .read
		.write       (mm_interconnect_0_ps2_0_avalon_ps2_slave_write),       //                   .write
		.writedata   (mm_interconnect_0_ps2_0_avalon_ps2_slave_writedata),   //                   .writedata
		.readdata    (mm_interconnect_0_ps2_0_avalon_ps2_slave_readdata),    //                   .readdata
		.waitrequest (mm_interconnect_0_ps2_0_avalon_ps2_slave_waitrequest), //                   .waitrequest
		.irq         (irq_mapper_receiver0_irq),                             //          interrupt.irq
		.PS2_CLK     (ps2_CLK),                                              // external_interface.export
		.PS2_DAT     (ps2_DAT)                                               //                   .export
	);

	disenyo_qsys_sram_0 sram_0 (
		.clk           (clk_clk),                                                  //                clk.clk
		.reset         (rst_controller_reset_out_reset),                           //              reset.reset
		.SRAM_DQ       (sram_DQ),                                                  // external_interface.export
		.SRAM_ADDR     (sram_ADDR),                                                //                   .export
		.SRAM_LB_N     (sram_LB_N),                                                //                   .export
		.SRAM_UB_N     (sram_UB_N),                                                //                   .export
		.SRAM_CE_N     (sram_CE_N),                                                //                   .export
		.SRAM_OE_N     (sram_OE_N),                                                //                   .export
		.SRAM_WE_N     (sram_WE_N),                                                //                   .export
		.address       (mm_interconnect_0_sram_0_avalon_sram_slave_address),       //  avalon_sram_slave.address
		.byteenable    (mm_interconnect_0_sram_0_avalon_sram_slave_byteenable),    //                   .byteenable
		.read          (mm_interconnect_0_sram_0_avalon_sram_slave_read),          //                   .read
		.write         (mm_interconnect_0_sram_0_avalon_sram_slave_write),         //                   .write
		.writedata     (mm_interconnect_0_sram_0_avalon_sram_slave_writedata),     //                   .writedata
		.readdata      (mm_interconnect_0_sram_0_avalon_sram_slave_readdata),      //                   .readdata
		.readdatavalid (mm_interconnect_0_sram_0_avalon_sram_slave_readdatavalid)  //                   .readdatavalid
	);

	disenyo_qsys_sys_sdram_pll_0 sys_sdram_pll_0 (
		.ref_clk_clk        (clk_clk),                            //      ref_clk.clk
		.ref_reset_reset    (rst_controller_reset_out_reset),     //    ref_reset.reset
		.sys_clk_clk        (sys_sdram_pll_0_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (sdram_clk_clk),                      //    sdram_clk.clk
		.reset_source_reset (sys_sdram_pll_0_reset_source_reset)  // reset_source.reset
	);

	disenyo_qsys_video_dma_controller_0 video_dma_controller_0 (
		.clk                  (clk_clk),                                                                      //                      clk.clk
		.reset                (rst_controller_reset_out_reset),                                               //                    reset.reset
		.master_address       (video_dma_controller_0_avalon_dma_master_address),                             //        avalon_dma_master.address
		.master_waitrequest   (video_dma_controller_0_avalon_dma_master_waitrequest),                         //                         .waitrequest
		.master_arbiterlock   (video_dma_controller_0_avalon_dma_master_lock),                                //                         .lock
		.master_read          (video_dma_controller_0_avalon_dma_master_read),                                //                         .read
		.master_readdata      (video_dma_controller_0_avalon_dma_master_readdata),                            //                         .readdata
		.master_readdatavalid (video_dma_controller_0_avalon_dma_master_readdatavalid),                       //                         .readdatavalid
		.slave_address        (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_address),    // avalon_dma_control_slave.address
		.slave_byteenable     (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_byteenable), //                         .byteenable
		.slave_read           (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_read),       //                         .read
		.slave_write          (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_write),      //                         .write
		.slave_writedata      (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_writedata),  //                         .writedata
		.slave_readdata       (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_readdata),   //                         .readdata
		.stream_ready         (video_dma_controller_0_avalon_pixel_source_ready),                             //      avalon_pixel_source.ready
		.stream_data          (video_dma_controller_0_avalon_pixel_source_data),                              //                         .data
		.stream_startofpacket (video_dma_controller_0_avalon_pixel_source_startofpacket),                     //                         .startofpacket
		.stream_endofpacket   (video_dma_controller_0_avalon_pixel_source_endofpacket),                       //                         .endofpacket
		.stream_valid         (video_dma_controller_0_avalon_pixel_source_valid)                              //                         .valid
	);

	disenyo_qsys_video_dual_clock_buffer_0 video_dual_clock_buffer_0 (
		.clk_stream_in            (clk_clk),                                                         //         clock_stream_in.clk
		.reset_stream_in          (rst_controller_reset_out_reset),                                  //         reset_stream_in.reset
		.clk_stream_out           (video_pll_0_vga_clk_clk),                                         //        clock_stream_out.clk
		.reset_stream_out         (rst_controller_002_reset_out_reset),                              //        reset_stream_out.reset
		.stream_in_ready          (video_dma_controller_0_avalon_pixel_source_ready),                //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (video_dma_controller_0_avalon_pixel_source_startofpacket),        //                        .startofpacket
		.stream_in_endofpacket    (video_dma_controller_0_avalon_pixel_source_endofpacket),          //                        .endofpacket
		.stream_in_valid          (video_dma_controller_0_avalon_pixel_source_valid),                //                        .valid
		.stream_in_data           (video_dma_controller_0_avalon_pixel_source_data),                 //                        .data
		.stream_out_ready         (video_dual_clock_buffer_0_avalon_dc_buffer_source_ready),         // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket), //                        .startofpacket
		.stream_out_endofpacket   (video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket),   //                        .endofpacket
		.stream_out_valid         (video_dual_clock_buffer_0_avalon_dc_buffer_source_valid),         //                        .valid
		.stream_out_data          (video_dual_clock_buffer_0_avalon_dc_buffer_source_data)           //                        .data
	);

	disenyo_qsys_video_pll_0 video_pll_0 (
		.ref_clk_clk        (clk_clk),                        //      ref_clk.clk
		.ref_reset_reset    (rst_controller_reset_out_reset), //    ref_reset.reset
		.vga_clk_clk        (video_pll_0_vga_clk_clk),        //      vga_clk.clk
		.reset_source_reset (video_pll_0_reset_source_reset)  // reset_source.reset
	);

	disenyo_qsys_video_vga_controller_0 video_vga_controller_0 (
		.clk           (video_pll_0_vga_clk_clk),                                         //                clk.clk
		.reset         (rst_controller_002_reset_out_reset),                              //              reset.reset
		.data          (video_dual_clock_buffer_0_avalon_dc_buffer_source_data),          //    avalon_vga_sink.data
		.startofpacket (video_dual_clock_buffer_0_avalon_dc_buffer_source_startofpacket), //                   .startofpacket
		.endofpacket   (video_dual_clock_buffer_0_avalon_dc_buffer_source_endofpacket),   //                   .endofpacket
		.valid         (video_dual_clock_buffer_0_avalon_dc_buffer_source_valid),         //                   .valid
		.ready         (video_dual_clock_buffer_0_avalon_dc_buffer_source_ready),         //                   .ready
		.VGA_CLK       (vga_CLK),                                                         // external_interface.export
		.VGA_HS        (vga_HS),                                                          //                   .export
		.VGA_VS        (vga_VS),                                                          //                   .export
		.VGA_BLANK     (vga_BLANK),                                                       //                   .export
		.VGA_SYNC      (vga_SYNC),                                                        //                   .export
		.VGA_R         (vga_R),                                                           //                   .export
		.VGA_G         (vga_G),                                                           //                   .export
		.VGA_B         (vga_B)                                                            //                   .export
	);

	disenyo_qsys_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                              (clk_clk),                                                                      //                                          clk_0_clk.clk
		.sys_sdram_pll_0_sys_clk_clk                                (sys_sdram_pll_0_sys_clk_clk),                                                  //                            sys_sdram_pll_0_sys_clk.clk
		.master_0_clk_reset_reset_bridge_in_reset_reset             (rst_controller_reset_out_reset),                                               //           master_0_clk_reset_reset_bridge_in_reset.reset
		.new_sdram_controller_0_reset_reset_bridge_in_reset_reset   (rst_controller_001_reset_out_reset),                                           // new_sdram_controller_0_reset_reset_bridge_in_reset.reset
		.video_dma_controller_0_reset_reset_bridge_in_reset_reset   (rst_controller_reset_out_reset),                                               // video_dma_controller_0_reset_reset_bridge_in_reset.reset
		.ensamblado_procesador_0_avalon_master_address              (ensamblado_procesador_0_avalon_master_address),                                //              ensamblado_procesador_0_avalon_master.address
		.ensamblado_procesador_0_avalon_master_waitrequest          (ensamblado_procesador_0_avalon_master_waitrequest),                            //                                                   .waitrequest
		.ensamblado_procesador_0_avalon_master_byteenable           (ensamblado_procesador_0_avalon_master_byteenable),                             //                                                   .byteenable
		.ensamblado_procesador_0_avalon_master_read                 (ensamblado_procesador_0_avalon_master_read),                                   //                                                   .read
		.ensamblado_procesador_0_avalon_master_readdata             (ensamblado_procesador_0_avalon_master_readdata),                               //                                                   .readdata
		.ensamblado_procesador_0_avalon_master_readdatavalid        (ensamblado_procesador_0_avalon_master_readdatavalid),                          //                                                   .readdatavalid
		.ensamblado_procesador_0_avalon_master_write                (ensamblado_procesador_0_avalon_master_write),                                  //                                                   .write
		.ensamblado_procesador_0_avalon_master_writedata            (ensamblado_procesador_0_avalon_master_writedata),                              //                                                   .writedata
		.master_0_master_address                                    (master_0_master_address),                                                      //                                    master_0_master.address
		.master_0_master_waitrequest                                (master_0_master_waitrequest),                                                  //                                                   .waitrequest
		.master_0_master_byteenable                                 (master_0_master_byteenable),                                                   //                                                   .byteenable
		.master_0_master_read                                       (master_0_master_read),                                                         //                                                   .read
		.master_0_master_readdata                                   (master_0_master_readdata),                                                     //                                                   .readdata
		.master_0_master_readdatavalid                              (master_0_master_readdatavalid),                                                //                                                   .readdatavalid
		.master_0_master_write                                      (master_0_master_write),                                                        //                                                   .write
		.master_0_master_writedata                                  (master_0_master_writedata),                                                    //                                                   .writedata
		.video_dma_controller_0_avalon_dma_master_address           (video_dma_controller_0_avalon_dma_master_address),                             //           video_dma_controller_0_avalon_dma_master.address
		.video_dma_controller_0_avalon_dma_master_waitrequest       (video_dma_controller_0_avalon_dma_master_waitrequest),                         //                                                   .waitrequest
		.video_dma_controller_0_avalon_dma_master_read              (video_dma_controller_0_avalon_dma_master_read),                                //                                                   .read
		.video_dma_controller_0_avalon_dma_master_readdata          (video_dma_controller_0_avalon_dma_master_readdata),                            //                                                   .readdata
		.video_dma_controller_0_avalon_dma_master_readdatavalid     (video_dma_controller_0_avalon_dma_master_readdatavalid),                       //                                                   .readdatavalid
		.video_dma_controller_0_avalon_dma_master_lock              (video_dma_controller_0_avalon_dma_master_lock),                                //                                                   .lock
		.new_sdram_controller_0_s1_address                          (mm_interconnect_0_new_sdram_controller_0_s1_address),                          //                          new_sdram_controller_0_s1.address
		.new_sdram_controller_0_s1_write                            (mm_interconnect_0_new_sdram_controller_0_s1_write),                            //                                                   .write
		.new_sdram_controller_0_s1_read                             (mm_interconnect_0_new_sdram_controller_0_s1_read),                             //                                                   .read
		.new_sdram_controller_0_s1_readdata                         (mm_interconnect_0_new_sdram_controller_0_s1_readdata),                         //                                                   .readdata
		.new_sdram_controller_0_s1_writedata                        (mm_interconnect_0_new_sdram_controller_0_s1_writedata),                        //                                                   .writedata
		.new_sdram_controller_0_s1_byteenable                       (mm_interconnect_0_new_sdram_controller_0_s1_byteenable),                       //                                                   .byteenable
		.new_sdram_controller_0_s1_readdatavalid                    (mm_interconnect_0_new_sdram_controller_0_s1_readdatavalid),                    //                                                   .readdatavalid
		.new_sdram_controller_0_s1_waitrequest                      (mm_interconnect_0_new_sdram_controller_0_s1_waitrequest),                      //                                                   .waitrequest
		.new_sdram_controller_0_s1_chipselect                       (mm_interconnect_0_new_sdram_controller_0_s1_chipselect),                       //                                                   .chipselect
		.ps2_0_avalon_ps2_slave_address                             (mm_interconnect_0_ps2_0_avalon_ps2_slave_address),                             //                             ps2_0_avalon_ps2_slave.address
		.ps2_0_avalon_ps2_slave_write                               (mm_interconnect_0_ps2_0_avalon_ps2_slave_write),                               //                                                   .write
		.ps2_0_avalon_ps2_slave_read                                (mm_interconnect_0_ps2_0_avalon_ps2_slave_read),                                //                                                   .read
		.ps2_0_avalon_ps2_slave_readdata                            (mm_interconnect_0_ps2_0_avalon_ps2_slave_readdata),                            //                                                   .readdata
		.ps2_0_avalon_ps2_slave_writedata                           (mm_interconnect_0_ps2_0_avalon_ps2_slave_writedata),                           //                                                   .writedata
		.ps2_0_avalon_ps2_slave_byteenable                          (mm_interconnect_0_ps2_0_avalon_ps2_slave_byteenable),                          //                                                   .byteenable
		.ps2_0_avalon_ps2_slave_waitrequest                         (mm_interconnect_0_ps2_0_avalon_ps2_slave_waitrequest),                         //                                                   .waitrequest
		.ps2_0_avalon_ps2_slave_chipselect                          (mm_interconnect_0_ps2_0_avalon_ps2_slave_chipselect),                          //                                                   .chipselect
		.sram_0_avalon_sram_slave_address                           (mm_interconnect_0_sram_0_avalon_sram_slave_address),                           //                           sram_0_avalon_sram_slave.address
		.sram_0_avalon_sram_slave_write                             (mm_interconnect_0_sram_0_avalon_sram_slave_write),                             //                                                   .write
		.sram_0_avalon_sram_slave_read                              (mm_interconnect_0_sram_0_avalon_sram_slave_read),                              //                                                   .read
		.sram_0_avalon_sram_slave_readdata                          (mm_interconnect_0_sram_0_avalon_sram_slave_readdata),                          //                                                   .readdata
		.sram_0_avalon_sram_slave_writedata                         (mm_interconnect_0_sram_0_avalon_sram_slave_writedata),                         //                                                   .writedata
		.sram_0_avalon_sram_slave_byteenable                        (mm_interconnect_0_sram_0_avalon_sram_slave_byteenable),                        //                                                   .byteenable
		.sram_0_avalon_sram_slave_readdatavalid                     (mm_interconnect_0_sram_0_avalon_sram_slave_readdatavalid),                     //                                                   .readdatavalid
		.video_dma_controller_0_avalon_dma_control_slave_address    (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_address),    //    video_dma_controller_0_avalon_dma_control_slave.address
		.video_dma_controller_0_avalon_dma_control_slave_write      (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_write),      //                                                   .write
		.video_dma_controller_0_avalon_dma_control_slave_read       (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_read),       //                                                   .read
		.video_dma_controller_0_avalon_dma_control_slave_readdata   (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_readdata),   //                                                   .readdata
		.video_dma_controller_0_avalon_dma_control_slave_writedata  (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_writedata),  //                                                   .writedata
		.video_dma_controller_0_avalon_dma_control_slave_byteenable (mm_interconnect_0_video_dma_controller_0_avalon_dma_control_slave_byteenable)  //                                                   .byteenable
	);

	disenyo_qsys_irq_mapper irq_mapper (
		.clk           (clk_clk),                                        //       clk.clk
		.reset         (rst_controller_reset_out_reset),                 // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),                       // receiver0.irq
		.sender_irq    (ensamblado_procesador_0_interrupt_receiver_irq)  //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (sys_sdram_pll_0_reset_source_reset), // reset_in0.reset
		.clk            (sys_sdram_pll_0_sys_clk_clk),        //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (video_pll_0_reset_source_reset),     // reset_in0.reset
		.clk            (video_pll_0_vga_clk_clk),            //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
