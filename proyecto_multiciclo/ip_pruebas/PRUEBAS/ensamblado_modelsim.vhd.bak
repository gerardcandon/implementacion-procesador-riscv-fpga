--
--Gerard Cand√≥n Arenas, 2020
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.constantes.all;
use work.retardos.all;
use work.tipos.all;

entity ensamblado_modelsim is
port (
		reloj, reset, start: in std_logic;
		irq: in st_irq;
		parar: out std_logic
	);
end ensamblado_modelsim;

architecture compor of ensamblado_modelsim is

component ensamblado_procesador is
port (
		reloj, start, reset: in std_logic; 			--reloj, puesta a cero y reset
		Pcero: out std_logic;
		address: out mem_direcc;						--avalonMM
		writedata: out dato_camino;
		readdata: in dato_camino;
		read, write: out std_logic;
		byteenable: out st_byteenable;
		waitrequest, readdatavalid: in std_logic;
		irq: in st_irq;										--interrupciones
		parar: out std_logic
	);
end component;

component mem is
port(
	reloj: in std_logic;
	Pcero: in std_logic;
	read: in std_logic;
	write: in std_logic;
	address: in mem_direcc;
	writedata: in dato_camino;
	byteenable: in st_byteenable;
	readdata: out dato_camino;
	waitrequest: out std_logic;
	readdatavalid: out std_logic
	);
end component;

component mm_reloj is
port(
	reloj: in std_logic;
	Pcero: in std_logic;
	read: in std_logic;
	write: in std_logic;
	address: in std_logic_vector(3 downto 0);
	writedata: in dato_camino;
	byteenable: in st_byteenable;
	readdata: out dato_camino;
	waitrequest: out std_logic;
	readdatavalid: out std_logic;
	int_clk: out std_logic);
end component;


--sufijo _s para no tener el mismo nombre que los puertos de la entida
signal Pcero_s: std_logic;
signal address_s: mem_direcc;
signal writedata_s: dato_camino;
signal readdata_s, readdata_mem, readdata_rlj: dato_camino;
signal read_s, read_mem, read_rlj, write_s, write_mem, write_rlj: std_logic;
signal byteenable_s: st_byteenable;
signal waitrequest_s, waitrequest_mem, waitrequest_rlj: std_logic;
signal readdatavalid_s, readdatavalid_mem, readdatavalid_rlj: std_logic;
signal irq_s: st_irq;

begin

irq_s(0) <= irq(0);

ensam: ensamblado_procesador port map(reloj => reloj, reset => reset, start => start, Pcero => Pcero_s, address => address_s, writedata => writedata_s, readdata => readdata_s,
												  read => read_s, write => write_s, byteenable => byteenable_s, waitrequest => waitrequest_s, readdatavalid => readdatavalid_s, irq => irq_s, parar => parar);
											
sdram: mem port map (reloj => reloj, Pcero => Pcero_s, address => address_s, writedata => writedata_s, readdata => readdata_mem,
							read => read_mem, write => write_mem, byteenable => byteenable_s, waitrequest => waitrequest_mem, readdatavalid => readdatavalid_mem);

mm_rlj: mm_reloj port map (reloj => reloj, Pcero => Pcero_s, address => address_s(3 downto 0), writedata => writedata_s, readdata => readdata_rlj,
									read => read_rlj, write => write_rlj, byteenable => byteenable_s, waitrequest => waitrequest_rlj, readdatavalid => readdatavalid_rlj,
									int_clk => irq_s(1));

arbitro: process(address_s, readdata_mem, readdatavalid_mem, waitrequest_mem, readdata_rlj, readdatavalid_rlj, 
					  waitrequest_rlj, read_s, write_s)
variable v_readdata: dato_camino;
variable v_readdatavalid, v_waitrequest, v_read_mem, v_write_mem, v_read_rlj, v_write_rlj: std_logic;
begin
	v_readdata := (others => '0');
	v_readdatavalid := '0';
	v_waitrequest := '0';
	v_read_mem := '0';
	v_read_rlj := '0';
	v_write_mem := '0';
	v_write_rlj := '0';
	
	if (readdatavalid_rlj = '1') then
		v_readdata := readdata_rlj;
		v_readdatavalid := readdatavalid_rlj;
		v_waitrequest := waitrequest_rlj;
	else
		v_readdata := readdata_mem;
		v_readdatavalid := readdatavalid_mem;
		v_waitrequest := waitrequest_mem;
	end if;
	
	if (read_s = '1') then
		if (address_s = DIR_mtimel or address_s = DIR_mtimeh or address_s = DIR_mtimecmpl or address_s = DIR_mtimecmph) then
			v_read_rlj := '1';
		else
			v_read_mem := '1';
		end if;
	end if;
	if (write_s = '1') then
		if (address_s = DIR_mtimel or address_s = DIR_mtimeh or address_s = DIR_mtimecmpl or address_s = DIR_mtimecmph) then
			v_write_rlj := '1';
		else
			v_write_mem := '1';
		end if;
	end if;
	
	readdata_s <= v_readdata;
	readdatavalid_s <= v_readdatavalid;
	waitrequest_s <= v_waitrequest;
	read_rlj <= v_read_rlj;
	read_mem <= v_read_mem;
	write_rlj <= v_write_rlj;
	write_mem <= v_write_mem;
end process;

end;
